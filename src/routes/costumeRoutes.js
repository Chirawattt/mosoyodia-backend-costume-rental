const express = require("express");
const multer = require("multer");
const router = express.Router();
const path = require("path");
const fs = require("fs");
const authMiddleware = require("../middleware/authMiddleware");
const Costume = require("../models/Costume");
const ReviewImage = require("../models/ReviewImage");

// üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(__dirname, "../../public/uploads");
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({ storage });

// GET ‡∏ä‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
  try {
    const costumes = await Costume.findAll();
    res.json(costumes);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET ‡∏ä‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
router.get("/category/:category", async (req, res) => {
  try {
    const costumes = await Costume.findAll({
      where: { category: req.params.category },
    });
    res.json(costumes);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà isRentable = true
router.get("/rentable", async (req, res) => {
  try {
    const costumes = await Costume.findAll({
      where: { isRentable: true },
    });
    res.json(costumes);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET ‡∏ä‡∏∏‡∏î‡∏ï‡∏≤‡∏° id
router.get("/:id", async (req, res) => {
  try {
    const costume = await Costume.findOne({
      where: { id: req.params.id },
    });
    res.json(costume);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î(‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
router.post("/", authMiddleware, upload.single("image"), async (req, res) => {
  try {
    const { name, price, category, age_group } = req.body;
    const image_path = req.file ? `uploads/${req.file.filename}` : null;

    const newCostume = await Costume.create({
      name,
      price,
      category,
      age_group,
      image_path,
    });

    res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", costume: newCostume });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î" });
  }
});

// Reset ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
router.put("/resetStatus", authMiddleware, async (req, res) => {
  try {
    await Costume.update({ status: 1 }, { where: {} });
    res.json({ message: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// PUT ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∏‡∏î
router.put("/:id", authMiddleware, upload.single("image"), async (req, res) => {
  try {
    const { name, price, category, age_group } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á image_path ‡πÄ‡∏Å‡πà‡∏≤
    const existingCostume = await Costume.findOne({
      where: { id: req.params.id },
    });

    if (!existingCostume) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ" });
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updateData = { name, price, category, age_group };

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    if (req.file) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
      updateData.image_path = `uploads/${req.file.filename}`;

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (existingCostume.image_path) {
        const oldImagePath = path.join(
          __dirname,
          "../../public",
          existingCostume.image_path
        );
        if (fs.existsSync(oldImagePath)) {
          fs.unlinkSync(oldImagePath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        }
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î
    await Costume.update(updateData, { where: { id: req.params.id } });

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∏‡∏î" });
  }
});

// DELETE ‡∏•‡∏ö‡∏ä‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    // üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
    const costume = await Costume.findOne({ where: { id: req.params.id } });

    if (!costume) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ" });
    }

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏´‡∏° ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (costume.image_path) {
      const imagePath = path.join(
        __dirname,
        "../../public",
        costume.image_path
      );

      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
      }
    }

    // üîπ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ
    const reviewImages = await ReviewImage.findAll({
      where: { costume_id: req.params.id },
    });
    for (const reviewImage of reviewImages) {
      if (reviewImage.image_path) {
        const reviewImagePath = path.join(
          __dirname,
          "../../public",
          reviewImage.image_path
        );

        if (fs.existsSync(reviewImagePath)) {
          fs.unlinkSync(reviewImagePath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        }
      }
      await ReviewImage.destroy({ where: { id: reviewImage.id } }); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }

    // üîπ ‡∏•‡∏ö‡∏ä‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await Costume.destroy({ where: { id: req.params.id } });

    res.json({ message: "‡∏•‡∏ö‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ä‡∏∏‡∏î" });
  }
});

// GET ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å id ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î
router.get("/:costume_id/reviewImages", async (req, res) => {
  try {
    const images = await ReviewImage.findAll({
      where: { costume_id: req.params.costume_id },
    });
    res.json(images);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î
router.put("/:id/status", authMiddleware, async (req, res) => {
  const { status } = req.body; // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å client
  try {
    await Costume.update({ status }, { where: { id: req.params.id } });
    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î isRentable
router.put("/:id/isRentable", authMiddleware, async (req, res) => {
  const { isRentable } = req.body; // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å client
  try {
    await Costume.update({ isRentable }, { where: { id: req.params.id } });
    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
