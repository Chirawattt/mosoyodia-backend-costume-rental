const express = require("express");
const router = express.Router();
const multer = require("multer"); // ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å
const path = require("path");
const fs = require("fs");
const ReviewImage = require("../models/ReviewImage");

// üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(__dirname, "../../public/uploads");
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({ storage });

// GET ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
  try {
    const images = await ReviewImage.findAll();
    res.json(images);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° costume_id
router.get("/costume/:costume_id", async (req, res) => {
  try {
    const images = await ReviewImage.findAll({
      where: { costume_id: req.params.costume_id },
    });
    res.json(images);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° id
router.get("/:image_id", async (req, res) => {
  try {
    const image = await ReviewImage.findOne({
      where: { id: req.params.image_id },
    });
    res.json(image);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
router.post("/upload", upload.single("image"), async (req, res) => {
  try {
    const { costume_id } = req.body;
    const image_path = req.file ? `uploads/${req.file.filename}` : null;

    if (!image_path) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    const newReviewImage = await ReviewImage.create({
      costume_id,
      image_path,
    });

    res.json({
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      reviewImage: newReviewImage,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" });
  }
});

// DELETE ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
router.delete("/:image_id", async (req, res) => {
  try {
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    const reviewImage = await ReviewImage.findOne({
      where: { id: req.params.image_id },
    });
    if (!reviewImage) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    if (reviewImage.image_path) {
      const imagePath = path.join(
        __dirname,
        "../../public",
        reviewImage.image_path
      );

      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
      }
    }
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await ReviewImage.destroy({ where: { id: req.params.image_id } });
    res.json({ message: "Image deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

//  Frontend ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà http://localhost:5000/uploads/filename.jpg

module.exports = router;
